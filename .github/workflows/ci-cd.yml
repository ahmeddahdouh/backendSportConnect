name: CI/CD Flask + Postgres

on:
  push:
    branches: [ "master" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: sportConnectBack
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image
        run: docker build -t my-flask-app .

      - name: Launch with Docker Compose
        env:
          DB_USER: postgres
          DB_PASSWORD: admin
          DB_NAME: sportConnectBack
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: |
          docker compose up -d

          echo "Waiting for container to become healthy..."
          timeout 60 bash -c "
            until docker inspect flask-app --format '{{.State.Health.Status}}' 2>/dev/null | grep -q healthy; do
              sleep 3
            done
          " || {
            docker logs flask-app
            exit 1
          }

          docker logs flask-app

      - name: Verify environment
        run: |
          echo "=== Environment Variables ==="
          docker exec flask-app env | grep -E "DB_|SECRET_|JWT"

          echo "=== Database Connection Test ==="
          docker exec flask-app python -c "
          import os;
          print(f'Connecting to: postgresql://{os.getenv(\"DB_USER\")}:****@{os.getenv(\"DB_HOST\", \"localhost\")}:5432/{os.getenv(\"DB_NAME\")}')
          "

      - name: Test API endpoint
        run: |
          curl -f http://localhost:5000/sport/ || {
            echo "API endpoint is not available"
            exit 1
          }

      - name: Cleanup after tests
        if: always()
        run: docker compose down -v

      - name: Deploy to EC2
        if: success() && github.ref == 'refs/heads/master'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            sudo apt-get update -y || sudo yum update -y

            if ! command -v git &> /dev/null; then
              sudo apt-get install -y git || sudo yum install -y git
            fi

            if ! command -v docker &> /dev/null; then
              sudo apt-get install -y docker.io || sudo yum install -y docker
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi

            if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi

            # CrÃ©er dossier de travail et cloner proprement
            mkdir -p ~/app
            cd ~/app

            rm -rf backendSportConnect
            git clone https://github.com/ahmeddahdouh/backendSportConnect.git backendSportConnect
            cd backendSportConnect

            cat > .env <<EOF
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            EOF

            sudo docker compose down || true

            if docker compose version &> /dev/null; then
              COMPOSE="docker compose"
            
            else
            COMPOSE="docker-compose"
            fi

            sudo $COMPOSE build
            sudo $COMPOSE up -d

            sleep 30
            sudo docker ps
            curl -f http://localhost:5000/sport/ || echo "API is not yet accessible"